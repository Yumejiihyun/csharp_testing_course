// Generated by Selenium IDE
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Serialization;
using Newtonsoft.Json;
using Excel = Microsoft.Office.Interop.Excel;


namespace addressbooktests
{
    [TestFixture]
    public class GroupTests : TestBase
    {
        public static IEnumerable<GroupData> RandomGroupDataProvider()
        {
            List<GroupData> groups = new List<GroupData>();
            for (int i = 0; i < 5; i++)
            {
                groups.Add(new GroupData(GenerateRandomString(30))
                {
                    Header = GenerateRandomString(100),
                    Footer = GenerateRandomString(100),
                });
            }
            return groups;
        }

        public static IEnumerable<GroupData> GroupDataFromCsvFile()
        {
            List<GroupData> groups = new List<GroupData>();
            string[] lines = File.ReadAllLines(@"groups.csv");
            foreach (string l in lines)
            {
                string[] parts = l.Split(',');
                groups.Add(new GroupData(parts[0])
                {
                    Header = parts[1],
                    Footer = parts[2],
                });
            }

            return groups;
        }

        public static IEnumerable<GroupData> GroupDataFromXmlFile()
        {
            return (List<GroupData>)
                new XmlSerializer(typeof(List<GroupData>))
                .Deserialize(new StreamReader(@"groups.xml"));
        }

        public static IEnumerable<GroupData> GroupDataFromJsonFile()
        {
            return JsonConvert.DeserializeObject<List<GroupData>>(
                File.ReadAllText(@"groups.json"));
        }

        public static IEnumerable<GroupData> GroupDataFromExcelFile()
        {
            List<GroupData> groups = new List<GroupData>();
            Excel.Application app = new Excel.Application();
            string fullPath = Path.Combine(Directory.GetCurrentDirectory(), "groups.xlsx");
            Excel.Workbook wb = app.Workbooks.Open(fullPath);
            Excel.Worksheet sheet = wb.ActiveSheet;
            Excel.Range range = sheet.UsedRange;
            for(int i = 1; i <= range.Rows.Count; i++)
            {
                groups.Add(new GroupData()
                {
                    Name = range.Cells[i, 1].Value,
                    Header = range.Cells[i, 2].Value,
                    Footer = range.Cells[i, 3].Value,
                });
            }
            wb.Close();
            app.Quit();
            return groups;
        }
        [Test, TestCaseSource("GroupDataFromExcelFile")]
        public void NewGroupTest(GroupData group)
        {
            app.NavigationHelper.GoToGroupsPage();
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            app.GroupHelper.CreateNewGroup(group);
            app.NavigationHelper.GoToGroupsPage();

            int count = app.GroupHelper.GetGroupCount();
            Assert.AreEqual(oldGroupList.Count + 1, count);

            oldGroupList.Add(group);
            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            newGroupList.Sort();
            oldGroupList.Sort();
            Assert.AreEqual(oldGroupList, newGroupList);
        }
        [Test]
        public void NewInvalidGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            GroupData group = Create();
            app.GroupHelper.CreateNewGroup(group);
            app.NavigationHelper.GoToGroupsPage();

            int count = app.GroupHelper.GetGroupCount();
            Assert.AreEqual(oldGroupList.Count, count);

            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            Assert.AreEqual(oldGroupList, newGroupList);

            GroupData Create()
            {
                GroupData data = new GroupData("a'a")
                {
                    Header = "sss",
                    Footer = "ddd"
                };
                return data;
            }
        }
        [Test]
        public void RemoveGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            if (!app.NavigationHelper.IsGroupPresent())
            {
                app.GroupHelper.CreateNewGroup(new GroupData(null));
                app.NavigationHelper.GoToGroupsPage();
            }
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            app.GroupHelper.RemoveGroup(1);
            app.NavigationHelper.GoToGroupsPage();

            int count = app.GroupHelper.GetGroupCount();
            Assert.AreEqual(oldGroupList.Count - 1, count);

            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();

            foreach (GroupData group in newGroupList)
            {
                Assert.AreNotEqual(group.Id, oldGroupList[0].Id);
            }

            oldGroupList.RemoveAt(0);
            Assert.AreEqual(oldGroupList, newGroupList);            
        }
        [Test]
        public void EditGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            if (!app.NavigationHelper.IsGroupPresent())
            {
                app.GroupHelper.CreateNewGroup(new GroupData(null));
                app.NavigationHelper.GoToGroupsPage();
            }
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            GroupData oldData = oldGroupList[0];
            GroupData group = Create();
            app.GroupHelper.EditGroup(1, group);
            app.NavigationHelper.GoToGroupsPage();

            int count = app.GroupHelper.GetGroupCount();
            Assert.AreEqual(oldGroupList.Count, count);

            oldGroupList[0].Name = group.Name;
            oldGroupList.Sort();
            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            newGroupList.Sort();
            Assert.AreEqual(oldGroupList, newGroupList);

            GroupData Create()
            {
                GroupData data = new GroupData("111")
                {
                    Header = "222",
                    Footer = "333"
                };
                return data;
            }
            var newData = newGroupList.First(e => e.Id == oldGroupList[0].Id);
            Assert.AreEqual(newData.Name, oldData.Name);
        }
    }
}