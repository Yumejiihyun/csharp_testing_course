// Generated by Selenium IDE
using NUnit.Framework;
using System.Collections.Generic;


namespace addressbooktests
{
    [TestFixture]
    public class GroupTests : TestBase
    {        
        [Test]
        public void NewGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            GroupData group = Create();
            app.GroupHelper.CreateNewGroup(group);
            app.NavigationHelper.GoToGroupsPage();

            oldGroupList.Add(group);
            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            newGroupList.Sort();
            oldGroupList.Sort();
            Assert.AreEqual(oldGroupList, newGroupList);

            GroupData Create()
            {
                GroupData data = new GroupData("aaa");
                data.Header = "sss";
                data.Footer = "ddd";
                return data;
            }
        }
        [Test]
        public void NewInvalidGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            GroupData group = Create();
            app.GroupHelper.CreateNewGroup(group);
            app.NavigationHelper.GoToGroupsPage();

            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            Assert.AreEqual(oldGroupList, newGroupList);

            GroupData Create()
            {
                GroupData data = new GroupData("a'a");
                data.Header = "sss";
                data.Footer = "ddd";
                return data;
            }
        }
        [Test]
        public void RemoveGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            if (!app.NavigationHelper.IsGroupPresent())
            {
                app.GroupHelper.CreateNewGroup(new GroupData(null));
                app.NavigationHelper.GoToGroupsPage();
            }
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            app.GroupHelper.RemoveGroup(1);
            app.NavigationHelper.GoToGroupsPage();

            oldGroupList.RemoveAt(0);
            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            Assert.AreEqual(oldGroupList, newGroupList);

        }
        [Test]
        public void EditGroupTest()
        {
            app.NavigationHelper.GoToGroupsPage();
            if (!app.NavigationHelper.IsGroupPresent())
            {
                app.GroupHelper.CreateNewGroup(new GroupData(null));
                app.NavigationHelper.GoToGroupsPage();
            }
            List<GroupData> oldGroupList = app.GroupHelper.GetGroupList();
            GroupData group = Create();
            app.GroupHelper.EditGroup(1, group);
            app.NavigationHelper.GoToGroupsPage();
            oldGroupList[0].Name = group.Name;
            oldGroupList.Sort();
            List<GroupData> newGroupList = app.GroupHelper.GetGroupList();
            newGroupList.Sort();
            Assert.AreEqual(oldGroupList, newGroupList);

            GroupData Create()
            {
                GroupData data = new GroupData("111");
                data.Header = "222";
                data.Footer = "333";
                return data;
            }
        }
    }
}